AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Scrape FFXIV player data

Parameters:
  DynamoDBTableName:
    Type: String
    Default: FFXIV
    Description: Name the DynamoDB table
  DataBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment package and base CSV
  DataS3Key:
    Type: String
    Description: CSV file which contains base template for DynamoDB
  ScraperLayerCodeKey:
    Type: String
    Default: scraper-layer.zip
    Description: S3 key (zip file) of Lambda deployment package for the scraper layer

Resources:
  Database:
    Type: AWS::DynamoDB::Table
    Properties:
      Tags:
        - Key: Project
          Value: FFXIV
      TableClass: STANDARD
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      ImportSourceSpecification:
        InputCompressionType: NONE
        InputFormat: CSV
        S3BucketSource:
          S3Bucket: !Ref DataBucket
          S3KeyPrefix: !Ref DataS3Key
      GlobalSecondaryIndexes:
        - IndexName: status-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  IdQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      MessageRetentionPeriod: 86400
      QueueName: FFXIVPlayerQueue
      Tags:
        - Key: Project
          Value: FFXIV
  LoaderLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt IdQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  LoaderLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DynamoToSQSFunction
      CodeUri: ./loader
      Handler: loader.lambda_handler
      Runtime: python3.13
      Role: !GetAtt LoaderLambdaExecutionRole.Arn
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableName
          QUEUE_URL: !Ref IdQueue
  LoaderEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FFXIVDynamoToSQSRule
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LoaderLambdaFunction.Arn
          Id: DynamoToSQSTarget
  LoaderLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoaderLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LoaderEventRule.Arn
  ScraperLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layer
      Description: Lambda Layer for web scraping
      CompatibleRuntimes:
        - python3.13
      RetentionPolicy: Delete
  ScraperLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt IdQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  ScraperLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: FinalFantasyScraperFucntion
      CodeUri: ./scraper
      Handler: scraper.lambda_handler
      Runtime: python3.13
      Role: !GetAtt ScraperLambdaExecutionRole.Arn
      Timeout: 360
      MemorySize: 384
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableName
          QUEUE_URL: !Ref IdQueue
      Layers:
        - !Ref ScraperLayer
  ScraperEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: FFXIVSQSToDynamoEventRule
      ScheduleExpression: rate(2 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScraperLambdaFunction.Arn
          Id: SQSToDynamoTarget
  ScraperLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScraperLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScraperEventRule.Arn
